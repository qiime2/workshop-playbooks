---
# Python 3 support
pip_virtualenv_command: /usr/bin/python3 -m virtualenv
pip_package: python3-pip

# PostgreSQL
postgresql_objects_users:
  - name: galaxy
postgresql_objects_databases:
  - name: galaxy
    owner: galaxy
postgresql_conf:
  - max_connections: 250
  - shared_buffers: 8GB

# PostgreSQL Backups
postgresql_backup_dir: /data/backups
postgresql_backup_local_dir: "{{ '~postgres' | expanduser }}/backups"

# Galaxy
galaxy_create_user: true
galaxy_separate_privileges: true
galaxy_manage_paths: true
galaxy_layout: root-dir
galaxy_root: /srv/galaxy
galaxy_user:
  name: galaxy
  shell: /bin/bash
galaxy_force_checkout: true
miniconda_prefix: "{{ galaxy_tool_dependency_dir }}/_conda"
miniconda_version: 4.7.12
miniconda_manage_dependencies: false
galaxy_repo: https://github.com/ebolyen/galaxy
galaxy_commit_id: qiime2
galaxy_tool_config_files:
  - "/opt/qiime2_tools/tools/qiime2_tool_conf.xml"
galaxy_config_files:
  - src: files/config/tool_data_table_conf.xml
    dest: "{{ galaxy_config_dir }}/tool_data_table_conf.xml"
  - src: templates/galaxy/config/job_conf.xml.j2
    dest: "{{ galaxy_config.galaxy.job_config_file }}"
  - src: files/welcome.html
    dest: "{{ galaxy_server_dir }}/static/welcome.html"
galaxy_manage_systemd: yes

galaxy_config:
  galaxy:
    brand: "QIIME 2 Server"
    admin_users: matthew.dillon@nau.edu,evan.bolyen@nau.edu,greg.caporaso@nau.edu
    database_connection: "postgresql:///galaxy?host=/var/run/postgresql"
    file_path: /data
    check_migrate_tools: false
    tool_data_path: "{{ galaxy_mutable_data_dir }}/tool-data"
    object_store_store_by: uuid
    id_secret: "{{ vault_id_secret }}"
    conda_ensure_channels: https://packages.qiime2.org/qiime2/2022.2/staged/core,iuc,conda-forge,bioconda,defaults
    conda_auto_install: true
    allow_user_creation: false
    require_login: true
    master_api_key: "{{ vault_api_key }}"
    tool_data_table_config_path: "{{ galaxy_config_dir }}/tool_data_table_conf.xml"
    job_config_file: "{{ galaxy_config_dir }}/job_conf.xml"
    # SQL Performance
    database_engine_option_server_side_cursors: true
    slow_query_log_threshold: 5
    enable_per_request_sql_debugging: true
    # File serving Performance
    nginx_x_accel_redirect_base: /_x_accel_redirect
    # Automation / Ease of Use / User-facing features
    watch_job_rules: 'auto'
    allow_path_paste: true
    allow_user_deletion: true
    show_welcome_with_login: true
    expose_user_name: true
    expose_dataset_path: true
    expose_potentially_sensitive_job_metrics: true
    # NFS workarounds
    retry_job_output_collection: 3
    # Debugging
    cleanup_job: onsuccess
    allow_user_impersonation: true
    # Tool security
    outputs_to_working_directory: true
    # email
    smtp_server: "{{ vault_smtp_server }}"
    smtp_username: "{{ vault_smtp_username }}"
    smtp_password: "{{ vault_smtp_password }}"
    smtp_ssl: "{{ vault_smtp_ssl }}"
    # database
    database_engine_option_pool_size: 20
    database_engine_option_max_overflow: 40
    log_level: WARNING
  uwsgi:
    socket: 127.0.0.1:5000
    stats: 127.0.0.1:9191
    buffer-size: 16384
    processes: 1
    threads: 4
    offload-threads: 1
    static-map:
      - /static={{ galaxy_server_dir }}/static
      - /favicon.ico={{ galaxy_server_dir }}/static/favicon.ico
    static-safe: client/galaxy/images
    master: true
    virtualenv: "{{ galaxy_venv_dir }}"
    pythonpath: "{{ galaxy_server_dir }}/lib"
    module: galaxy.webapps.galaxy.buildapp:uwsgi_app()
    thunder-lock: true
    die-on-term: true
    hook-master-start:
      - unix_signal:2 gracefully_kill_them_all
      - unix_signal:15 gracefully_kill_them_all
    py-call-osafterfork: true
    enable-threads: true
    mule:
      - lib/galaxy/main.py
      - lib/galaxy/main.py
      - lib/galaxy/main.py
      - lib/galaxy/main.py
    farm: job-handlers:1,2,3,4

galaxy_systemd_memory_limit:
  # This is for the entire group of uWSGI master, web worker, and mule processes
  mule: 200

# NGINX
nginx_servers:
  - redirect-ssl
nginx_ssl_servers:
  - galaxy
nginx_enable_default_server: false
nginx_conf_http:
  client_max_body_size: 1g
sslkeys:
  privkey.pem: "{{ vault_ssl_private_key }}"
nginx_conf_ssl_certificate: fullchain.pem
nginx_conf_ssl_certificate_key: privkey.pem
