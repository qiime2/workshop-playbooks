---
# This role allocates the necessary AWS resources for running a QIIME 2 workshop

- name: create vpc
  ec2_vpc_net:
    name: "{{ workshop_name }}"
    state: present
    cidr_block: "{{ vpc_cidr_block }}"
    region: "{{ ec2_region }}"
    tags:
      Environment: "{{ workshop_name }}"
  register: vpc

- name: create vpc gateway
  ec2_vpc_igw:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_region }}"
    state: present
  register: igw

- name: create vpc subnet
  ec2_vpc_subnet:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_region }}"
    cidr: "{{ vpc_cidr_block }}"
    tags:
      Name: "{{ workshop_name }} subnet"
    state: present
  register: subnet

- name: gather route table facts
  ec2_vpc_route_table_info:
    region: "{{ ec2_region }}"
    filters:
      vpc-id: "{{ vpc.vpc.id }}"
  register: route_table

- name: configure vpc route table
  ec2_vpc_route_table:
    vpc_id: "{{ vpc.vpc.id }}"
    region: "{{ ec2_region }}"
    route_table_id: "{{ route_table.route_tables[0].id }}"
    lookup: id
    subnets:
      - "{{ subnet.subnet.id }}"
    routes:
      - dest: 0.0.0.0/0
        gateway_id: "{{ igw.gateway_id }}"

- name: create vpc security groups
  ec2_group:
    name: "{{ item.name }}"
    description: "{{ item.desc }}"
    rules: "{{ item.rules }}"
    region: "{{ ec2_region }}"
    vpc_id: "{{ vpc.vpc.id }}"
    state: present
  with_items: "{{ security_groups }}"

- name: create keypair
  ec2_key:
    name: "{{ workshop_name }}"
    region: "{{ ec2_region }}"
    state: present
  register: key

- name: save keypair to localhost
  copy:
    content: "{{ key.key.private_key }}"
    dest: "{{ playbook_dir }}/../tmp/{{ workshop_key_fn }}"
    mode: 0600
  when: key.changed

- name: allocate jump host instance
  ec2_instance:
    region: "{{ ec2_region }}"
    key_name: "{{ key.key.name }}"
    security_group: "{{ item.group }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    instance_type: "{{ item.instance_type }}"
    image:
      id: "{{ item.image }}"
    tags: "{{ item.instance_tags }}"
    exact_count: "{{ item.exact_count }}"
    wait: True
    volumes:
      - device_name: /dev/sda1
        ebs:
          delete_on_termination: False
          volume_type: gp2
          volume_size: "{{ volume_size }}"
  with_items: "{{ ec2_jump_host_instances }}"
  register: jump_hosts_with_volumes

- name: get jump host info
  ec2_instance_info:
    region: "{{ ec2_region }}"
    filters:
      instance.group-name: "{{ group_name }}"
      "tag:Name": "{{ jump_host_name }}"
  register: jump_hosts

- name: assign elastic ip to jump host
  ec2_eip:
    region: "{{ ec2_region }}"
    device_id: "{{ jump_hosts.instances[0].instance_id }}"
    public_ip: "{{ eip }}"
    reuse_existing_ip_allowed: true
    in_vpc: true

- name: add jump host to inventory
  add_host:
    name: "{{ eip }}"
    groups: jump_hosts, all_hosts

- name: allocate ebs
  ec2_vol:
    region: "{{ ec2_region }}"
    tags:
      Name: "{{ workshop_name }}"
    instance: "{{ jump_hosts.instances[0].instance_id }}"
    volume_size: "{{ volume_size }}"
    volume_type: gp2
    device_name: /dev/xvdb
    state: present
  register: ebs_vol

- name: allocate compute instances
  ec2_instance:
    region: "{{ ec2_region }}"
    key_name: "{{ key.key.name }}"
    security_group: "{{ item.group }}"
    vpc_subnet_id: "{{ subnet.subnet.id }}"
    instance_type: "{{ item.instance_type }}"
    image:
      id: "{{ item.image }}"
    tags: "{{ item.instance_tags }}"
    exact_count: "{{ item.exact_count }}"
    network:
      assign_public_ip: True
    volumes:
      - device_name: /dev/sda1
        ebs:
          delete_on_termination: False
          volume_type: gp2
          volume_size: "{{ volume_size }}"
    wait: True
  register: compute_hosts
  with_items: "{{ ec2_compute_instances }}"

- name: tag jump host ebs volumes
  ec2_tag:
    region: "{{ ec2_region }}"
    # This should be /dev/sda1
    resource: "{{ jump_hosts_with_volumes.results[0].instances[0].block_device_mappings[0].ebs.volume_id }}"
    state: present
    tags:
      Name: "{{ workshop_name }}"

- name: tag compute ebs volumes
  ec2_tag:
    region: "{{ ec2_region }}"
    # This should be /dev/sda1
    resource: "{{ item.block_device_mappings[0].ebs.volume_id }}"
    state: present
    tags:
      Name: "{{ workshop_name }}"
  with_items: "{{ compute_hosts.results[0].instances }}"

- name: add compute hosts to inventory
  add_host:
    name: "{{ item.public_ip_address }}"
    groups: all_hosts, compute_hosts
  with_items: "{{ compute_hosts.results[0].instances }}"

- name: add vars to dynamic groups
  add_host:
    name: "{{ item.1 }}"
    groups: compute_hosts
    grp: "worker{{ item.0 }}"
  with_indexed_items: "{{ groups['compute_hosts'] }}"

- name: check if users files already exist
  stat:
    path: "{{ playbook_dir }}/../tmp/roster.json"
  register: roster

- name: generate account info
  command: "python {{ playbook_dir }}/../bin/generate_accts.py '{{ ec2_compute_instances | to_json }}' '{{ groups['compute_hosts'] | to_json }}' {{ accts_per_host }}"
  when: not roster.stat.exists

- pause: seconds=60
